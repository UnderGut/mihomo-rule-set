#!/bin/bash
set -e

OUTPUT_DIR="dist"
SOURCES_FILE="sources.list"
TEMP_DIR="temp_work"

echo "--- Cleaning up old files ---"
rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
rm -rf "$TEMP_DIR"
mkdir -p "$TEMP_DIR"

if [ ! -f "$SOURCES_FILE" ]; then
    echo "Error: Sources file not found at '$SOURCES_FILE'!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ IP/CIDR
is_ipcidr() {
    local line="$1"
    [[ $line =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?$ ]]
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–Ω—É—Ç—Ä–∏ .mrs —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º PROCESS-NAME
detect_mrs_type() {
    local mrs_file="$1"

    # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    local has_domain=0
    local has_ipcidr=0
    local has_process=0

    # –ï—Å—Ç—å –ª–∏ domain
    if grep -q "domain:" "$mrs_file"; then
        has_domain=1
    fi

    # –ï—Å—Ç—å –ª–∏ ipcidr
    if grep -q "ipcidr:" "$mrs_file"; then
        has_ipcidr=1
    fi

    # –ï—Å—Ç—å –ª–∏ PROCESS-NAME –≤ payload
    if grep -q '^  - PROCESS-NAME,' "$mrs_file"; then
        has_process=1
    fi

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    local count=$((has_domain + has_ipcidr + has_process))

    if [ $count -eq 1 ]; then
        if [ $has_domain -eq 1 ]; then
            echo "domain"
            return
        elif [ $has_ipcidr -eq 1 ]; then
            echo "ipcidr"
            return
        else
            echo "process-name"
            return
        fi
    fi

    # –ï—Å–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "mixed"
    if [ $count -gt 1 ]; then
        echo "mixed"
        return
    fi

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (ip + domain)
process_plain_file() {
    local filepath="$1"
    local rule_name="$2"
    local subdir="$3"

    local ip_file="$TEMP_DIR/${rule_name}_ip.txt"
    local domain_file="$TEMP_DIR/${rule_name}_domain.txt"

    > "$ip_file"
    > "$domain_file"

    while IFS= read -r line; do
        [[ -z "$line" || "$line" =~ ^[#\!].* ]] && continue
        if is_ipcidr "$line"; then
            echo "$line" >> "$ip_file"
        else
            echo "$line" >> "$domain_file"
        fi
    done < "$filepath"

    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    mkdir -p "$OUTPUT_DIR/$subdir"

    if [ -s "$ip_file" ]; then
        echo "Converting IP list for $rule_name"
        mihomo convert-ruleset ipcidr text "$ip_file" "$OUTPUT_DIR/$subdir/${rule_name}_ip.mrs"
        echo "‚úÖ $rule_name IP converted."
    fi

    if [ -s "$domain_file" ]; then
        echo "Converting domain list for $rule_name"
        local temp_yaml="$TEMP_DIR/${rule_name}_domain.yaml"
        echo "payload:" > "$temp_yaml"
        grep -v -E '^(#|$|!)' "$domain_file" | sed "s/.*/  - '&'/" >> "$temp_yaml"
        mihomo convert-ruleset domain yaml "$temp_yaml" "$OUTPUT_DIR/$subdir/${rule_name}_domain.mrs"
        echo "‚úÖ $rule_name domain converted."
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ .mrs —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
save_mrs_with_type() {
    local src="$1"
    local base_name="$2"
    local type="$3"
    local subdir="$4"

    # –ï—Å–ª–∏ —Ç–∏–ø –ø—É—Å—Ç–æ–π (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π), –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if [[ -z "$type" ]]; then
        echo "‚ö†Ô∏è Type unknown, skipping saving $base_name.mrs"
        return
    fi

    mkdir -p "$OUTPUT_DIR/$subdir"
    cp "$src" "$OUTPUT_DIR/$subdir/${base_name}_${type}.mrs"
    echo "Saved $base_name as ${base_name}_${type}.mrs in $subdir"
}

echo "--- Starting build process ---"

while IFS= read -r line; do
    [[ -z "$line" || "$line" == \#* ]] && continue

    url="$line"
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ –¥–æ–º–µ–Ω–∞ –∏ –¥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –¥–ª—è –ø–æ–¥–ø–∞–ø–æ–∫
    # –ü—Ä–∏–º–µ—Ä: https://github.com/UnderGut/rule-set/raw/main/clash/ru-inline.yaml
    # –í–æ–∑—å–º–µ–º path –ø–æ—Å–ª–µ "raw/" –∏–ª–∏ –ø–æ—Å–ª–µ "main/"
    # –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–º –≤—Å—ë –ø–æ—Å–ª–µ "github.com/*/*/raw/" –∏–ª–∏ "github.com/*/*/blob/"
    # –ü–æ—Å–∫–æ–ª—å–∫—É raw –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: ...github.com/user/repo/raw/branch/...
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º grep + cut –∏–ª–∏ parameter expansion

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –¥–æ–º–µ–Ω
    path_without_protocol="${url#*://*/}"
    # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ:
    # –î–ª—è github raw —Å—Å—ã–ª–∫–∏ –≤—ã—Ä–µ–∂–µ–º –≤—Å—ë –ø–æ—Å–ª–µ "github.com/user/repo/raw/branch/"
    # –ü—Ä–∏–º–µ—Ä, URL = https://github.com/UnderGut/rule-set/raw/main/clash/ru-inline.yaml
    # –¢–æ–≥–¥–∞ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å "clash" –∏ –¥–∞–ª—å—à–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–∫—É —Å grep -Po
if [[ "$url" =~ github.com/.+/.+/(raw|blob)/.+/.+ ]]; then
    tmp="${url#*github.com/}"
    tmp="${tmp#*/}"
    tmp="${tmp#*/}"
    tmp="${tmp#raw/}"
    tmp="${tmp#blob/}"
    tmp="${tmp#*/}"
    path_part="$tmp"
else
    path_part=""
fi

    # –¢–µ–ø–µ—Ä—å –ø—É—Ç—å –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "clash/ru-inline.yaml"

    # –û—Ç–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    source_filename=$(basename "$url")
    rule_name="${source_filename%.*}"

    # –û—Ç–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∞–ø–∫—É (–≤—Å–µ –ø—É—Ç–∏ –∫—Ä–æ–º–µ —Ñ–∞–π–ª–∞)
    subdir=$(dirname "$path_part")

    echo "Processing: $rule_name from $url"
    echo "Target subdirectory: $subdir"

    curl -L -s -o "$TEMP_DIR/$source_filename" "$url"

    ext="${source_filename##*.}"

    if [[ "$ext" == "mrs" ]]; then
        mrs_type=$(detect_mrs_type "$TEMP_DIR/$source_filename")
        echo "Detected .mrs type: $mrs_type"

        # –ï—Å–ª–∏ mixed ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å —ç—Ç–∏–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
        if [[ "$mrs_type" == "mixed" ]]; then
            mkdir -p "$OUTPUT_DIR/$subdir"
            cp "$TEMP_DIR/$source_filename" "$OUTPUT_DIR/$subdir/${rule_name}_mixed.mrs"
            echo "Saved mixed type file"
        elif [[ -n "$mrs_type" ]]; then
            save_mrs_with_type "$TEMP_DIR/$source_filename" "$rule_name" "$mrs_type" "$subdir"
        else
            echo "‚ö†Ô∏è Unknown .mrs file type for $rule_name, skipping save"
        fi

    else
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        process_plain_file "$TEMP_DIR/$source_filename" "$rule_name" "$subdir"
    fi

    echo "-------------------------------------"
done < "$SOURCES_FILE"

echo "--- Cleaning up temporary files ---"
rm -rf "$TEMP_DIR"

echo "üéâ Build process finished successfully."
