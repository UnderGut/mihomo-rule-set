#!/bin/bash
set -e

OUTPUT_DIR="dist"
SOURCES_FILE="sources.list"
TEMP_DIR="temp_work"

echo "--- Cleaning up old files ---"
rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
rm -rf "$TEMP_DIR"
mkdir -p "$TEMP_DIR"

if [ ! -f "$SOURCES_FILE" ]; then
    echo "Error: Sources file not found at '$SOURCES_FILE'!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ IP/CIDR
is_ipcidr() {
    local line="$1"
    [[ $line =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?$ ]]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–∞–≤–∏–ª –≤–Ω—É—Ç—Ä–∏ .mrs —Ñ–∞–π–ª–∞
detect_mrs_type() {
    local mrs_file="$1"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª –∫–ª—é—á "domain" –∏–ª–∏ "ipcidr"
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–π –≤ YAML
    if grep -q "domain:" "$mrs_file"; then
        echo "domain"
    elif grep -q "ipcidr:" "$mrs_file"; then
        echo "ipcidr"
    else
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º unknown
        echo "unknown"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ IP –∏ domain)
process_plain_file() {
    local filepath="$1"
    local rule_name="$2"

    local ip_file="$TEMP_DIR/${rule_name}_ip.txt"
    local domain_file="$TEMP_DIR/${rule_name}_domain.txt"

    > "$ip_file"
    > "$domain_file"

    while IFS= read -r line; do
        [[ -z "$line" || "$line" =~ ^[#\!].* ]] && continue
        if is_ipcidr "$line"; then
            echo "$line" >> "$ip_file"
        else
            echo "$line" >> "$domain_file"
        fi
    done < "$filepath"

    if [ -s "$ip_file" ]; then
        echo "Converting IP list for $rule_name"
        mihomo convert-ruleset ipcidr text "$ip_file" "$OUTPUT_DIR/${rule_name}_ip.mrs"
        echo "‚úÖ $rule_name IP converted."
    fi

    if [ -s "$domain_file" ]; then
        echo "Converting domain list for $rule_name"
        local temp_yaml="$TEMP_DIR/${rule_name}_domain.yaml"
        echo "payload:" > "$temp_yaml"
        grep -v -E '^(#|$|!)' "$domain_file" | sed "s/.*/  - '&'/" >> "$temp_yaml"
        mihomo convert-ruleset domain yaml "$temp_yaml" "$OUTPUT_DIR/${rule_name}_domain.mrs"
        echo "‚úÖ $rule_name domain converted."
    fi
}

echo "--- Starting build process ---"
while IFS= read -r line; do
    [[ -z "$line" || "$line" == \#* ]] && continue

    url="$line"
    source_filename=$(basename "$url")
    rule_name="${source_filename%.*}"

    echo "Processing: $rule_name from $url"
    curl -L -s -o "$TEMP_DIR/$source_filename" "$url"

    ext="${source_filename##*.}"

    if [[ "$ext" == "mrs" ]]; then
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∞–≤–∏–ª –≤–Ω—É—Ç—Ä–∏ .mrs
        mrs_type=$(detect_mrs_type "$TEMP_DIR/$source_filename")
        echo "Detected .mrs type: $mrs_type"

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–ª–∏ –∫–æ–ø–∏—Ä—É–µ–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ –≤ –∏–º—è
        cp "$TEMP_DIR/$source_filename" "$OUTPUT_DIR/${rule_name}_${mrs_type}.mrs"

    else
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –∞–≤—Ç–æ—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
        process_plain_file "$TEMP_DIR/$source_filename" "$rule_name"
    fi

    echo "-------------------------------------"
done < "$SOURCES_FILE"

echo "--- Cleaning up temporary files ---"
rm -rf "$TEMP_DIR"

echo "üéâ Build process finished successfully."
